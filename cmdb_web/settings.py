"""
Django settings for cmdb_web project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import datetime
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!ok(bp&f-3knbm4e822_g3sbcez8&d^dz=hihtbxl3^l#en%@3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cmdb',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cmdb_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'my_customer_tags': 'cmdb.templatetags.custon_tage',

            }
        },
    },
]

WSGI_APPLICATION = 'cmdb_web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    #('css',os.path.join(STATIC_ROOT,'css')),
    #('images',os.path.join(STATIC_ROOT,'images')),
    os.path.join(BASE_DIR,'cmdb/static'),
)
LOGIN_URL = '/login'

date_now = datetime.datetime.now().strftime("%Y-%m-%d %H:%I:%S")
BASE_LOG_DIR = os.path.join(BASE_DIR, "log")
if not os.path.exists(BASE_LOG_DIR):
    os.mkdir(BASE_LOG_DIR)
LOGGING = {
    'version': 1,  # version表示版本，一般不用改
    # disable_existing_loggers表示弃用已经存在的日志，True表示弃用，False表示不弃用。
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'verbose': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        # 标准的日志格式
        'standard': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        # 简单的日志格式
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][ %(message)s]'
        },

        # 定义一个特殊的日志格式
        'collect': {
            'format': '%(message)s'
        }
    },
    # 上面的日志格式可以自己随便定义几个
    # 过滤器
    'filters': {

    },
    # 处理器
    'handlers': {
        # 在终端打印
        'console': {
            'level': 'DEBUG',  # 日志的级别
            'class': 'logging.StreamHandler',  #
            'formatter': 'simple'  # 使用哪种日志格式
        },
        # 默认的
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 保存到文件，自动切
            # 每天切割一次日志
            'when': 'D',
            'interval': 1,
            'filename': os.path.join(BASE_LOG_DIR, "info.log"),  # 日志文件的位置
            #'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 10,  # 最多备份几个
            'formatter': 'standard',  # 使用哪种日志格式
            'encoding': 'utf-8',  # 保存的格式
        },
        # 'debug': {
        #     'level': 'DEBUG',
        #     'class': 'logging.handlers.TimedRotatingFileHandler',  # 保存到文件，自动切
        #     # 每天切割一次日志
        #     'when': 'M',
        #     'interval': 5,
        #     'filename': os.path.join(BASE_LOG_DIR, "info.log"),  # 日志文件的位置
        #    # 'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
        #     'backupCount': 10,  # 最多备份几个
        #     'formatter': 'verbose',  # 使用哪种日志格式
        #     'encoding': 'utf-8',  # 保存的格式
        # },
        # 专门用来记错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 保存到文件，自动切
             # 每天切割一次日志
            'when': 'D',
            'interval': 1,
            'filename': os.path.join(BASE_LOG_DIR, "err.log"),  # 日志文件
            #'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 10,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
       # 专门定义一个收集特定信息的日志
       #  'collect': {
       #      'level': 'INFO',
       #      'class': 'logging.handlers.TimedRotatingFileHandler',  # 保存到文件，自动切
       #      # 每天切割一次日志
       #      'when': 'D',
       #      'interval': 1,
       #      'filename': os.path.join(BASE_LOG_DIR, "collect.log"),
       #      #'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
       #      'backupCount': 10,
       #      'formatter': 'collect',
       #      'encoding': "utf-8"
       #  }
    },
    # 上面的处理器可以根据自己的需求来配置
    'loggers': {
        # 默认的logger应用如下配置
        'django': {
            'handlers': ['default', 'console', 'error'],  # 上线之后可以把'console'移除
            'level': 'DEBUG',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        # 名为 'collect'的logger还单独处理
        # 'collect': {
        #     'handlers': ['console', 'collect'],
        #     'level': 'INFO',
        #}
    },
}


